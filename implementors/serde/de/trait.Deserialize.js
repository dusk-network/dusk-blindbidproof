(function() {var implementors = {};
implementors["bulletproofs"] = [{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bulletproofs/range_proof_mpc/messages/struct.BitCommitment.html\" title=\"struct bulletproofs::range_proof_mpc::messages::BitCommitment\">BitCommitment</a>",synthetic:false,types:["bulletproofs::range_proof::messages::BitCommitment"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bulletproofs/range_proof_mpc/messages/struct.BitChallenge.html\" title=\"struct bulletproofs::range_proof_mpc::messages::BitChallenge\">BitChallenge</a>",synthetic:false,types:["bulletproofs::range_proof::messages::BitChallenge"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bulletproofs/range_proof_mpc/messages/struct.PolyCommitment.html\" title=\"struct bulletproofs::range_proof_mpc::messages::PolyCommitment\">PolyCommitment</a>",synthetic:false,types:["bulletproofs::range_proof::messages::PolyCommitment"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bulletproofs/range_proof_mpc/messages/struct.PolyChallenge.html\" title=\"struct bulletproofs::range_proof_mpc::messages::PolyChallenge\">PolyChallenge</a>",synthetic:false,types:["bulletproofs::range_proof::messages::PolyChallenge"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bulletproofs/range_proof_mpc/messages/struct.ProofShare.html\" title=\"struct bulletproofs::range_proof_mpc::messages::ProofShare\">ProofShare</a>",synthetic:false,types:["bulletproofs::range_proof::messages::ProofShare"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bulletproofs/struct.RangeProof.html\" title=\"struct bulletproofs::RangeProof\">RangeProof</a>",synthetic:false,types:["bulletproofs::range_proof::RangeProof"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bulletproofs/r1cs/struct.R1CSProof.html\" title=\"struct bulletproofs::r1cs::R1CSProof\">R1CSProof</a>",synthetic:false,types:["bulletproofs::r1cs::proof::R1CSProof"]},];
implementors["curve25519_dalek"] = [{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"curve25519_dalek/scalar/struct.Scalar.html\" title=\"struct curve25519_dalek::scalar::Scalar\">Scalar</a>",synthetic:false,types:["curve25519_dalek::scalar::Scalar"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.EdwardsPoint.html\" title=\"struct curve25519_dalek::edwards::EdwardsPoint\">EdwardsPoint</a>",synthetic:false,types:["curve25519_dalek::edwards::EdwardsPoint"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"curve25519_dalek/edwards/struct.CompressedEdwardsY.html\" title=\"struct curve25519_dalek::edwards::CompressedEdwardsY\">CompressedEdwardsY</a>",synthetic:false,types:["curve25519_dalek::edwards::CompressedEdwardsY"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"curve25519_dalek/ristretto/struct.RistrettoPoint.html\" title=\"struct curve25519_dalek::ristretto::RistrettoPoint\">RistrettoPoint</a>",synthetic:false,types:["curve25519_dalek::ristretto::RistrettoPoint"]},{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"curve25519_dalek/ristretto/struct.CompressedRistretto.html\" title=\"struct curve25519_dalek::ristretto::CompressedRistretto\">CompressedRistretto</a>",synthetic:false,types:["curve25519_dalek::ristretto::CompressedRistretto"]},];
implementors["dusk_blindbidproof"] = [{text:"impl&lt;'de&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"dusk_blindbidproof/struct.Verify.html\" title=\"struct dusk_blindbidproof::Verify\">Verify</a>",synthetic:false,types:["dusk_blindbidproof::blindbid::verify::Verify"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        })()